<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">

<CSP name="DeepSeeLightPivotTable.css" application="">
<![CDATA[{{replace:css}}]]>
</CSP>

<CSP name="DeepSeeLightPivotTable.js" application="">
<![CDATA[{{replace:js}}]]>
</CSP>

    <Class name="DeepSee.LightPivotTable">
        <Super>%DeepSee.Component.Portlet.abstractPortlet</Super>
        <TimeChanged>63531,82258.204784</TimeChanged>
        <TimeCreated>63515,61322.546099</TimeCreated>

        <Parameter name="INCLUDEFILES">
            <Default>style:DeepSeeLightPivotTable.css,script:DeepSeeLightPivotTable.js</Default>
        </Parameter>

        <Property name="DataSource">
            <Type>%String</Type>
        </Property>

        <Property name="ShowSummary">
            <Type>%Boolean</Type>
        </Property>

        <Method name="%OnGetPortletName">
            <ClassMethod>1</ClassMethod>
            <ReturnType>%String</ReturnType>
            <Implementation><![CDATA[    quit "Light pivot table"
]]></Implementation>
        </Method>

        <Method name="%OnGetPortletIcon">
            <ClassMethod>1</ClassMethod>
            <ReturnType>%String</ReturnType>
            <Implementation><![CDATA[    quit "deepsee/ds2_dialpad_44.png"
]]></Implementation>
        </Method>

        <Method name="%OnGetPortletSettings">
            <ClassMethod>1</ClassMethod>
            <FormalSpec>*pInfo:%List</FormalSpec>
            <ReturnType>%Status</ReturnType>
            <Implementation><![CDATA[
    kill pInfo // $LB(name,value,type,caption,title)

    set pInfo($I(pInfo)) = $LB("DataSource", "/" _ $NAMESPACE, "%String", $$$Text("MDX2JSON source", "%DeepSee"), "Set the URL of MDX2JSON source. Example: ""/SAMPLES""")
    set pInfo($I(pInfo)) = $LB("ShowSummary", 1, "%Boolean", $$$Text("Show summary?", "%DeepSee"), "Show summary row")

    quit $$$OK
]]></Implementation>
        </Method>

        <Method name="getConnectedController">
            <Language>javascript</Language>
            <ClientMethod>1</ClientMethod>
            <Implementation><![CDATA[
    var controller = this.getController();

    if (null === controller) {
        this.connectToController();
        controller = this.getController();
    }

    return controller;
]]></Implementation>
        </Method>

        <Method name="notifyViewHandler">
            <FormalSpec>reason,data1,data2,data3</FormalSpec>
            <Language>javascript</Language>
            <ClientMethod>1</ClientMethod>
            <Implementation><![CDATA[
    if (!this.LightPivotTable) return;

    var controller = this.getConnectedController();

    if (reason === "dataChange") {

        this.LightPivotTable.clearFilters();

        // updateFilters
        for (var i in controller.filters) {
            this.LightPivotTable.setFilter(controller.filters[i].spec);
        }

        this.LightPivotTable.refresh();

    }
]]></Implementation>
        </Method>

        <Method name="renderContents">
            <Language>javascript</Language>
            <ClientMethod>1</ClientMethod>
            <Implementation><![CDATA[    this.getConnectedController(); // to receive notifications
]]></Implementation>
        </Method>

        <Method name="onCreate">
            <Language>javascript</Language>
            <ClientMethod>1</ClientMethod>
            <Implementation><![CDATA[
    var container = document.getElementById(this.id),
        controller,
        source,
        setup,
        _ = this,
        widget = this, // It's lie. It changes later.
        widgetKey,
        i, info = {};

    var post = function (url, data, callback) {

        var xhr = new XMLHttpRequest();
        xhr.open("POST", url);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
                callback((function () {
                    try {
                        return JSON.parse(xhr.responseText) || {}
                    } catch (e) {
                        return {
                            error: "<h1>Unable to parse server response</h1><p>" + xhr.responseText
                                + "</p>"
                            };
                    }
                })());
            } else if (xhr.readyState === 4 && xhr.status !== 200) {
                callback({ error: xhr.responseText
                    || "Error while trying to retrieve data from server." });
            }
        };
        xhr.send(JSON.stringify(data));

    };

    if (!container) {
        console.error("Light pivot table: Unable to get widget with ID=" + this.id);
        return;
    }

    for (i in container.childNodes) {
        if (container.childNodes[i].className === "lpt-container") {
            container = container.childNodes[i];
            break;
        }
    }

    setTimeout(function() { // onCreate fired when scripts are ready, but this.parent is missed.

        controller = _.getConnectedController();

        // !ultra-bydlocode (get the widget object)
        while (widget["parent"]) {
            widget = widget["parent"];
        }
        // !ultra-bydlocode (possible you will have better suggestions to get widget key)
        widgetKey = parseInt(_.parent.parent.onwindowgrab.match(/[0-9]+/)[0]);

        post((source = location.origin + container.getAttribute("data-source")) + "/Widgets", {
            Dashboard: widget["dashboardName"]
            }, function (data) {
                if (data.error) {
                    container.innerHTML = "<br/><br/><h3>Unable to get data from server.</h3><p>Check if data source is configured and accessible: " + source + "/Widgets" + "</p>"
                } else {
                    for (i in data.children) {
                        if (data.children[i].key === widgetKey) {
                            info = data.children[i];
                            break;
                        }
                    }
                    //console.log(info);
                    setup = {
                        container: container,
                        dataSource: {
                            pivot: info["dataSource"],
                            MDX2JSONSource: source,
                            basicMDX: info["mdx"]
                        }
                    }
                    if (controller && controller["data"] && controller["data"]["rowCaptions"] && typeof controller["data"]["rowCaptions"][0] === "string") setup.caption = controller["data"]["rowCaptions"][0];
                    if (controller && controller["data"] && !setup.caption) setup.caption = controller["data"]["defaultCaption"] || "";
                    if (info["drillDownDataSource"]) setup["drillDownTarget"] = info["drillDownDataSource"];
                    setup["showSummary"] = !!parseInt(container.getAttribute("show-summary"));

                    _.LightPivotTable = new LightPivotTable(setup);
                }
        });

    }, 0);
]]></Implementation>
        </Method>

        <Method name="%DrawHTML">
            <Implementation><![CDATA[
    set ..renderFlag = ..renderFlag + 1

    // copy ..settings into properties
    #dim propName As %String = $order(..settings(""))
    while (propName '= "")
    {
        if ("" '= $get(..settings(propName)))
            try
            {
                set $property($this, propName) = ..settings(propName)
            }
            catch {}

        set propName = $order(..settings(propName))
    }

    &html<
        <div data-source="#(..DataSource)#" show-summary="#(..ShowSummary)#" class="lpt-container" style="position: absolute; left: 0; bottom: 0; width: 100%; height: 100%;">

        </div>
    >
]]></Implementation>
        </Method>

        <Method name="adjustContentSize">
            <FormalSpec>load,width,height</FormalSpec>
            <Language>javascript</Language>
            <ClientMethod>1</ClientMethod>
            <Implementation><![CDATA[
    if (!load && this.LightPivotTable) {
        this.LightPivotTable.updateSizes();
    }

    // cheat-codes to make instrument panel visible

    var outContainer = document.getElementById(this.id),
        inContainer;

    if (outContainer) {
        for (var i in outContainer.childNodes) {
            if (outContainer.childNodes[i].className === "lpt-container") {
                inContainer = outContainer.childNodes[i];
                inContainer.style.height = outContainer.clientHeight + "px";
                break;
            }
        }
    }
]]></Implementation>
        </Method>
    </Class>

</Export>